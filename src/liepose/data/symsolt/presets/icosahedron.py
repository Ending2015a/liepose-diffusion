import numpy as np
import open3d as o3d

from .base import BasePreset

obj_index = 2

sym_normals: np.ndarray = np.array(
  [
    [0.0, -0.35682209, 0.93417236],
    [-0.0, 0.35682209, 0.93417236],
    [0.57735027, -0.57735027, 0.57735027],
    [0.93417236, 0.0, 0.35682209],
    [0.57735027, 0.57735027, 0.57735027],
    [-0.57735027, -0.57735027, 0.57735027],
    [-0.93417236, 0.0, 0.35682209],
    [-0.57735027, 0.57735027, 0.57735027],
    [-0.35682209, 0.93417236, 0.0],
    [0.35682209, 0.93417236, 0.0],
    [-0.35682209, -0.93417236, -0.0],
    [0.35682209, -0.93417236, 0.0],
    [0.0, 0.35682209, -0.93417236],
    [0.0, -0.35682209, -0.93417236],
    [0.57735027, 0.57735027, -0.57735027],
    [0.93417236, 0.0, -0.35682209],
    [0.57735027, -0.57735027, -0.57735027],
    [-0.57735027, 0.57735027, -0.57735027],
    [-0.93417236, 0.0, -0.35682209],
    [-0.57735027, -0.57735027, -0.57735027],
  ],
  dtype=np.float64,
)

sym_tangents: np.ndarray = np.array(
  [
    [-0.8660254, 0.46708618, 0.17841104],
    [-0.8660254, -0.46708618, 0.17841104],
    [0.11026409, 0.75576131, 0.64549722],
    [-0.35682209, 0.0, 0.93417236],
    [0.11026409, -0.75576131, 0.64549722],
    [-0.11026409, 0.75576131, 0.64549722],
    [0.35682209, 0.0, 0.93417236],
    [-0.11026409, -0.75576131, 0.64549722],
    [0.46708618, 0.17841104, 0.8660254],
    [-0.46708618, 0.17841104, 0.8660254],
    [0.46708618, -0.17841104, 0.8660254],
    [-0.46708618, -0.17841104, 0.8660254],
    [-0.8660254, -0.46708618, -0.17841104],
    [-0.8660254, 0.46708618, -0.17841104],
    [0.11026409, -0.75576131, -0.64549722],
    [-0.35682209, 0.0, -0.93417236],
    [0.11026409, 0.75576131, -0.64549722],
    [-0.11026409, -0.75576131, -0.64549722],
    [0.35682209, 0.0, -0.93417236],
    [-0.11026409, 0.75576131, -0.64549722],
  ],
  dtype=np.float64,
)

sym_angles = np.radians(np.array([-120, 0, 120], dtype=np.float64))

num_sym_poses = len(sym_angles) * len(sym_normals)


class IcosahedronPreset(BasePreset):
  obj_index: int = obj_index
  num_sym_poses: int = num_sym_poses

  sym_normals: np.ndarray = sym_normals
  sym_tangents: np.ndarray = sym_tangents
  sym_angles: np.ndarray = sym_angles

  @classmethod
  def create_mesh(cls, size=1.0):
    mesh = o3d.geometry.TriangleMesh.create_icosahedron(
      radius=size / 2.5,
      create_uv_map=True,
    )
    return mesh
